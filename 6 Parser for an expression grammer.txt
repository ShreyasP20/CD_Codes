6 Implement a parser for an expression grammar using LEX and YACC.

LEX :

%{
#include "y.tab.h"
%}
alpha[a-zA-Z]
digit[0-9]
%%
[\t\n] {}
"for" return FOR;
{digit}+ return NUM;
{alpha}({alpha}|{digit})* return id;
"<=" return le;
">=" return ge;
"==" return eq;
"!=" return ne;
"&&" return and;
"||" return or;
. return yytext[0];
%%
int yywrap()
{
return 1;
}


YACC:
%{

#include <stdio.h>
#include <stdlib.h>
int yylex(void);
int yyerror(char* s);
%}
%token NUM id FOR le ge eq ne or and
%right '='
%left or and
%left '>' '<' le ge eq ne
%left '+' '-'
%left '*' '/'
%left '!'
%%
s:st{printf("valid Input");return 0;}
st: FOR'('E';'E2';'E')'DEF
;
DEF: '{'BODY'}'
|E';'
|st
|
;
BODY: BODY BODY
|E';'
|st
|
;
E: id'='E
|E'+'E
|E'-'E
|E'*'E
|E'/'E
|E'<'E
|E'>'E
|E le E
|E ge E
|E eq E
|E ne E
|E or E
|E and E
|E'+''+'
|E'-''-'
|id
|NUM
;
E2:E'<'E
|E'>'E
|E le E
|E ge E
|E eq E
|E ne E
|E or E
|E and E
;
%%
int main() {
printf("Enter the expression\n");
yyparse();
return 0;
}
int yyerror(char* s) {
printf("Expression is invalid\n");
}